/** ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**
**     @file      lin_cfg.h
**
**     @date      18:13:56, 2021-11-10
**
**     @brief     Hardware configuration file
**
**     Copyright : 1997 - 2015 Freescale Semiconductor, Inc.
**     Copyright 2016 - 2017 NXP
**     All Rights Reserved.
**
**     THIS SOFTWARE IS PROVIDED BY NXP "AS IS" AND ANY EXPRESSED OR
**     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
**     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
**     IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
**     INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
**     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
**     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
**     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
**     IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
**     THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/

/*!
 * @file lin_cfg.h
 *
 * @page misra_violations MISRA-C:2012 violations
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 2.3, A project should not contain unused type declarations.
 * The type can be used by user application.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 2.5, A project should not contain unused macro declarations.
 * The macro can be used by user application.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 5.1, External identifiers shall be distinct.
 * The identifiers are generated from signal names. The signal name is defined by users and we can not control this.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 5.2, Identifiers declared in the same scope and name
 * space shall be distinct.
 * The name of signal is defined by user and we can not control this.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 5.4, Macro identifiers shall be distinct.
 * The name of signal is defined by user and we can not control this.
 *
 * @section [global]
 * Violates MISRA 2012 Required Rule 5.5, Identifier shall be distinct from macro names.
 * The name of signal is defined by user and we can not control this.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Directive 4.9, A function should be used in preference
 * to a function-like macro where they are interchangeable.
 * The macro is used to define static or dynamic implementation of API functions.
 * This way is more efficient.
 *
 * @section [global]
 * Violates MISRA 2012 Advisory Rule 20.10, The #/ ## preprocessor operator should not be used.
 * The operator is used to define dynamic implementation of API functions of signal interaction.
 * This way is more efficient.
 */
#ifndef    LIN_CFG_H
#define    LIN_CFG_H

#include <stdint.h>
#include "lin_driver.h"
#include "lin1.h"

/* Implements    : SUPPORT_MASTER_MODE_Class */
#define SUPPORT_MASTER_MODE     0U /* Equal to 1 when have at least one master interface */
/* Implements    : SUPPORT_SLAVE_MODE_Class */
#define SUPPORT_SLAVE_MODE      1U  /* Equal to 1 when have at least one slave interface */

/* Implements    : SUPPORT_PROTOCOL_21_Class */
#define SUPPORT_PROTOCOL_21     1U /* Equal to 1 when have at least one LIN2.1 or LIN2.2 interface */
/* Implements    : SUPPORT_PROTOCOL_20_Class */
#define SUPPORT_PROTOCOL_20     0U /* Equal to 1 when have at least one LIN2.0 interface */
/* Implements    : SUPPORT_PROTOCOL_J2602_Class */
#define SUPPORT_PROTOCOL_J2602  0U /* Equal to 1 when have at least one J2602 interface */
/* Implements    : SUPPORT_PROTOCOL_13_Class */
#define SUPPORT_PROTOCOL_13     0U /* Equal to 1 when have at least one LIN1.3 interface */

/* Implements    : SUPPORT_DIAG_CLASS_III_Class */
#define SUPPORT_DIAG_CLASS_III  1U /* Equal to 1 when have at least one ifc with diagnostic class III */
/* Implements    : SUPPORT_DIAG_CLASS_II_Class */
#define SUPPORT_DIAG_CLASS_II   1U /* Equal to 1 when have at least one ifc with diagnostic class II or III */

/* Implements    : SUPPORT_TRANSPORT_LAYER_Class */
#define SUPPORT_TRANSPORT_LAYER 1U /* Equal to 1 to use transport layer */
/* Implements    : SUPPORT_DIAG_SERVICE_Class */
#define SUPPORT_DIAG_SERVICE    1U /* Equal to 1 to use diagnostic service layer */
#define TIME_OUT_UNIT_US 1000U

#define HARDWARE_INSTANCE_COUNT    2U

#define LIN_NUM_OF_IFCS  1U
#define LIN_NUM_OF_SLAVE_IFCS 1U
#define LIN_NUM_OF_MASTER_IFCS 0U

/* frame buffer size */
#define LIN_FRAME_BUF_SIZE          16U
#define LIN_FLAG_BUF_SIZE           3U

/**********************************************************************/
/***************               Interfaces           *******************/
/**********************************************************************/
typedef enum {
   LI0 = 0x00U,
   INVALID_IFC = 0xFFU
}l_ifc_handle;

typedef enum {
   LI0_Slave = 0x00U,
   INVALID_SLAVE_INDEX = 0xFFU
}l_ifc_slave_handle;
typedef enum {
   INVALID_MASTER_INDEX = 0xFFU
}l_ifc_master_handle;

/**********************************************************************/
/***************               Signals              *******************/
/**********************************************************************/
/* Number of signals */
#define LIN_NUM_OF_SIGS  10U
/* List of signals */
typedef enum {

   /* Interface_name = LI0 */

   LI0_PDCU_BDCS1_Backlight_brightness_fb

   , LI0_BDCS1_BacklightStatus
  
   , LI0_PFGLS_ResponseError
  
   , LI0_PFGLS_RLWindowControl
  
   , LI0_PFGLS_CustomSignal
  
   , LI0_PFGLS_ButtonSoundRequest
  
   , LI0_PFGLS_ErrorSts
  
   , LI0_PFGLS_Voltage_errorCode
  
   , LI0_PFGLS__Capsense_errorCode
  
   , LI0_PFGLS__Motor_errorCode
  
} l_signal_handle;
/**********************************************************************/
/*****************               Frame             ********************/
/**********************************************************************/
/* Number of frames */
#define LIN_NUM_OF_FRMS  4U
/* List of frames */
typedef enum {
/* All frames for master node */

   /* Interface_name = LI0 */

   LI0_PDCU_Lin1Fr1

   , LI0_PFGLS_Lin1Fr1
  
   , LI0_MasterReq
  
   , LI0_SlaveResp
  
} l_frame_handle;
/**********************************************************************/
/***************             Configuration          *******************/
/**********************************************************************/


/* Size of configuration in ROM and RAM used for interface: LI0 */
#define LI0_LIN_SIZE_OF_CFG  8U



/*********************************************************************
 * global macros
 *********************************************************************/
/*FUNCTION**********************************************************************
 *
 * Function Name : l_bool_rd
 * Description   : This function return value of bool signal
 *
 * Implements    : l_bool_rd_Class
 *END**************************************************************************/
#define l_bool_rd(SIGNAL) l_bool_rd_##SIGNAL()

/*FUNCTION**********************************************************************
 *
 * Function Name : l_bool_wr
 * Description   : This function write value A to bool signal
 *
 * Implements    : l_bool_wr_Class
 *END**************************************************************************/
#define l_bool_wr(SIGNAL, A) l_bool_wr_##SIGNAL(A)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_u8_rd
 * Description   : This function read data from (1-8 bit)signal
 *
 * Implements    : l_u8_rd_Class
 *END**************************************************************************/
#define l_u8_rd(SIGNAL) l_u8_rd_##SIGNAL()

/*FUNCTION**********************************************************************
 *
 * Function Name : l_u8_wr
 * Description   : This this function write data to (1-8 bit)signal
 *
 * Implements    : l_u8_wr_Class
 *END**************************************************************************/
#define l_u8_wr(SIGNAL, A) l_u8_wr_##SIGNAL(A)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_u16_rd
 * Description   : This function read data from (8-16 bit)signal
 *
 * Implements    : l_u16_rd_Class
 *END**************************************************************************/
#define l_u16_rd(SIGNAL) l_u16_rd_##SIGNAL()

/*FUNCTION**********************************************************************
 *
 * Function Name : l_u16_wr
 * Description   : This function write data to (8-16 bit) signal
 *
 * Implements    : l_u16_wr_Class
 *END**************************************************************************/
#define l_u16_wr(SIGNAL, A) l_u16_wr_##SIGNAL(A)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_bytes_rd
 * Description   : This function read data from bytes signal
 *
 * Implements    : l_bytes_rd_Class
 *END**************************************************************************/
#define l_bytes_rd(SIGNAL, start, count, data)  l_bytes_rd_##SIGNAL(start, count, data)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_bytes_wr
 * Description   : This function write data to bytes signal
 *
 * Implements    : l_bytes_wr_Class
 *END**************************************************************************/
#define l_bytes_wr(SIGNAL, start, count, data) l_bytes_wr_##SIGNAL(start, count, data)

/*FUNCTION**********************************************************************
 *
 * Function Name : l_flg_tst
 * Description   : This function return value of flag which related with signal
 *
 * Implements    : l_flg_tst_Class
 *END**************************************************************************/
#define l_flg_tst(FLAG) l_flg_tst_##FLAG()

/*FUNCTION**********************************************************************
 *
 * Function Name : l_flg_clr
 * Description   : This function clear flag which related with signal
 *
 * Implements    : l_flg_clr_Class
 *END**************************************************************************/
#define l_flg_clr(FLAG) l_flg_clr_##FLAG()

#define LIN_TEST_BIT(A,B) ((l_bool)((((A) & (1U << (B))) != 0U) ? 1U : 0U))
#define LIN_SET_BIT(A,B)                      ((A) |= (l_u8) (1U << (B)))
#define LIN_CLEAR_BIT(A,B)               ((A) &= ((l_u8) (~(1U << (B)))))
#define LIN_BYTE_MASK  ((l_u16)(((l_u16)((l_u16)1 << CHAR_BIT)) - (l_u16)1))


/* Returns the low byte of the 32-bit value    */
#define BYTE_0(n)                              ((l_u8)((n) & (l_u8)0xFF))
/* Returns the second byte of the 32-bit value */
#define BYTE_1(n)                        ((l_u8)(BYTE_0((n) >> (l_u8)8)))
/* Returns the third byte of the 32-bit value  */
#define BYTE_2(n)                       ((l_u8)(BYTE_0((n) >> (l_u8)16)))
/* Returns high byte of the 32-bit value       */
#define BYTE_3(n)                       ((l_u8)(BYTE_0((n) >> (l_u8)24)))

/*
 * defines for signal access
 */



#define LIN_LI0_PDCU_BDCS1_Backlight_brightness_fb_BYTE_OFFSET    4U
#define LIN_LI0_PDCU_BDCS1_Backlight_brightness_fb_BIT_OFFSET    4U
#define LIN_LI0_PDCU_BDCS1_Backlight_brightness_fb_SIGNAL_SIZE    4U
#define LIN_LI0_PDCU_BDCS1_Backlight_brightness_fb_FLAG_BYTE_OFFSET    0U
#define LIN_LI0_PDCU_BDCS1_Backlight_brightness_fb_FLAG_BIT_OFFSET    5U


#define LIN_LI0_BDCS1_BacklightStatus_BYTE_OFFSET    0U
#define LIN_LI0_BDCS1_BacklightStatus_BIT_OFFSET    0U
#define LIN_LI0_BDCS1_BacklightStatus_SIGNAL_SIZE    1U
#define LIN_LI0_BDCS1_BacklightStatus_FLAG_BYTE_OFFSET    0U
#define LIN_LI0_BDCS1_BacklightStatus_FLAG_BIT_OFFSET    0U


#define LIN_LI0_PFGLS_ResponseError_BYTE_OFFSET    15U
#define LIN_LI0_PFGLS_ResponseError_BIT_OFFSET    7U
#define LIN_LI0_PFGLS_ResponseError_SIGNAL_SIZE    1U
#define LIN_LI0_PFGLS_ResponseError_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_PFGLS_ResponseError_FLAG_BIT_OFFSET    7U


#define LIN_LI0_PFGLS_RLWindowControl_BYTE_OFFSET    8U
#define LIN_LI0_PFGLS_RLWindowControl_BIT_OFFSET    0U
#define LIN_LI0_PFGLS_RLWindowControl_SIGNAL_SIZE    3U
#define LIN_LI0_PFGLS_RLWindowControl_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_PFGLS_RLWindowControl_FLAG_BIT_OFFSET    0U


#define LIN_LI0_PFGLS_CustomSignal_BYTE_OFFSET    8U
#define LIN_LI0_PFGLS_CustomSignal_BIT_OFFSET    3U
#define LIN_LI0_PFGLS_CustomSignal_SIGNAL_SIZE    1U
#define LIN_LI0_PFGLS_CustomSignal_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_PFGLS_CustomSignal_FLAG_BIT_OFFSET    1U


#define LIN_LI0_PFGLS_ButtonSoundRequest_BYTE_OFFSET    8U
#define LIN_LI0_PFGLS_ButtonSoundRequest_BIT_OFFSET    4U
#define LIN_LI0_PFGLS_ButtonSoundRequest_SIGNAL_SIZE    1U
#define LIN_LI0_PFGLS_ButtonSoundRequest_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_PFGLS_ButtonSoundRequest_FLAG_BIT_OFFSET    2U


#define LIN_LI0_PFGLS_ErrorSts_BYTE_OFFSET    8U
#define LIN_LI0_PFGLS_ErrorSts_BIT_OFFSET    5U
#define LIN_LI0_PFGLS_ErrorSts_SIGNAL_SIZE    1U
#define LIN_LI0_PFGLS_ErrorSts_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_PFGLS_ErrorSts_FLAG_BIT_OFFSET    3U


#define LIN_LI0_PFGLS_Voltage_errorCode_BYTE_OFFSET    10U
#define LIN_LI0_PFGLS_Voltage_errorCode_BIT_OFFSET    0U
#define LIN_LI0_PFGLS_Voltage_errorCode_SIGNAL_SIZE    1U
#define LIN_LI0_PFGLS_Voltage_errorCode_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_PFGLS_Voltage_errorCode_FLAG_BIT_OFFSET    4U


#define LIN_LI0_PFGLS__Capsense_errorCode_BYTE_OFFSET    10U
#define LIN_LI0_PFGLS__Capsense_errorCode_BIT_OFFSET    1U
#define LIN_LI0_PFGLS__Capsense_errorCode_SIGNAL_SIZE    1U
#define LIN_LI0_PFGLS__Capsense_errorCode_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_PFGLS__Capsense_errorCode_FLAG_BIT_OFFSET    5U


#define LIN_LI0_PFGLS__Motor_errorCode_BYTE_OFFSET    10U
#define LIN_LI0_PFGLS__Motor_errorCode_BIT_OFFSET    2U
#define LIN_LI0_PFGLS__Motor_errorCode_SIGNAL_SIZE    1U
#define LIN_LI0_PFGLS__Motor_errorCode_FLAG_BYTE_OFFSET    1U
#define LIN_LI0_PFGLS__Motor_errorCode_FLAG_BIT_OFFSET    6U



/**********************************************************************/
/***************        Static API Functions        *******************/
/**********************************************************************/
/*
 * the static signal access macros
 */


 
/* static access macros for signal LI0_PDCU_BDCS1_Backlight_brightness_fb */
 
#define l_u8_rd_LI0_PDCU_BDCS1_Backlight_brightness_fb() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PDCU_BDCS1_Backlight_brightness_fb_BYTE_OFFSET]) >> 4U) & 0x0fU))


#define l_u8_wr_LI0_PDCU_BDCS1_Backlight_brightness_fb(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PDCU_BDCS1_Backlight_brightness_fb_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PDCU_BDCS1_Backlight_brightness_fb_BYTE_OFFSET] & 0x0fU) | \
    (((A) << 4U) & 0xf0U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PDCU_BDCS1_Backlight_brightness_fb_FLAG_BYTE_OFFSET],\
         LIN_LI0_PDCU_BDCS1_Backlight_brightness_fb_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_BDCS1_BacklightStatus */

 
#define l_bool_rd_LI0_BDCS1_BacklightStatus() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_BDCS1_BacklightStatus_BYTE_OFFSET], \
    LIN_LI0_BDCS1_BacklightStatus_BIT_OFFSET))

#define l_bool_wr_LI0_BDCS1_BacklightStatus(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_BDCS1_BacklightStatus_BYTE_OFFSET], \
    LIN_LI0_BDCS1_BacklightStatus_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_BDCS1_BacklightStatus_BYTE_OFFSET], \
    LIN_LI0_BDCS1_BacklightStatus_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDCS1_BacklightStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDCS1_BacklightStatus_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_PFGLS_ResponseError */

 
#define l_bool_rd_LI0_PFGLS_ResponseError() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS_ResponseError_BYTE_OFFSET], \
    LIN_LI0_PFGLS_ResponseError_BIT_OFFSET))

#define l_bool_wr_LI0_PFGLS_ResponseError(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS_ResponseError_BYTE_OFFSET], \
    LIN_LI0_PFGLS_ResponseError_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS_ResponseError_BYTE_OFFSET], \
    LIN_LI0_PFGLS_ResponseError_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS_ResponseError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS_ResponseError_FLAG_BIT_OFFSET);}
 
/* static access macros for signal LI0_PFGLS_RLWindowControl */
 
#define l_u8_rd_LI0_PFGLS_RLWindowControl() \
    ((l_u8)  (((g_lin_frame_data_buffer[LIN_LI0_PFGLS_RLWindowControl_BYTE_OFFSET]) >> 0U) & 0x07U))


#define l_u8_wr_LI0_PFGLS_RLWindowControl(A) \
    { \
    g_lin_frame_data_buffer[LIN_LI0_PFGLS_RLWindowControl_BYTE_OFFSET] = \
    (l_u8)((g_lin_frame_data_buffer[LIN_LI0_PFGLS_RLWindowControl_BYTE_OFFSET] & 0xf8U) | \
    (((A) << 0U) & 0x07U)); \
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS_RLWindowControl_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS_RLWindowControl_FLAG_BIT_OFFSET); \
    }


/* static access macros for signal LI0_PFGLS_CustomSignal */

 
#define l_bool_rd_LI0_PFGLS_CustomSignal() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS_CustomSignal_BYTE_OFFSET], \
    LIN_LI0_PFGLS_CustomSignal_BIT_OFFSET))

#define l_bool_wr_LI0_PFGLS_CustomSignal(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS_CustomSignal_BYTE_OFFSET], \
    LIN_LI0_PFGLS_CustomSignal_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS_CustomSignal_BYTE_OFFSET], \
    LIN_LI0_PFGLS_CustomSignal_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS_CustomSignal_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS_CustomSignal_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_PFGLS_ButtonSoundRequest */

 
#define l_bool_rd_LI0_PFGLS_ButtonSoundRequest() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS_ButtonSoundRequest_BYTE_OFFSET], \
    LIN_LI0_PFGLS_ButtonSoundRequest_BIT_OFFSET))

#define l_bool_wr_LI0_PFGLS_ButtonSoundRequest(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS_ButtonSoundRequest_BYTE_OFFSET], \
    LIN_LI0_PFGLS_ButtonSoundRequest_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS_ButtonSoundRequest_BYTE_OFFSET], \
    LIN_LI0_PFGLS_ButtonSoundRequest_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS_ButtonSoundRequest_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS_ButtonSoundRequest_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_PFGLS_ErrorSts */

 
#define l_bool_rd_LI0_PFGLS_ErrorSts() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS_ErrorSts_BYTE_OFFSET], \
    LIN_LI0_PFGLS_ErrorSts_BIT_OFFSET))

#define l_bool_wr_LI0_PFGLS_ErrorSts(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS_ErrorSts_BYTE_OFFSET], \
    LIN_LI0_PFGLS_ErrorSts_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS_ErrorSts_BYTE_OFFSET], \
    LIN_LI0_PFGLS_ErrorSts_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS_ErrorSts_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS_ErrorSts_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_PFGLS_Voltage_errorCode */

 
#define l_bool_rd_LI0_PFGLS_Voltage_errorCode() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS_Voltage_errorCode_BYTE_OFFSET], \
    LIN_LI0_PFGLS_Voltage_errorCode_BIT_OFFSET))

#define l_bool_wr_LI0_PFGLS_Voltage_errorCode(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS_Voltage_errorCode_BYTE_OFFSET], \
    LIN_LI0_PFGLS_Voltage_errorCode_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS_Voltage_errorCode_BYTE_OFFSET], \
    LIN_LI0_PFGLS_Voltage_errorCode_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS_Voltage_errorCode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS_Voltage_errorCode_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_PFGLS__Capsense_errorCode */

 
#define l_bool_rd_LI0_PFGLS__Capsense_errorCode() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS__Capsense_errorCode_BYTE_OFFSET], \
    LIN_LI0_PFGLS__Capsense_errorCode_BIT_OFFSET))

#define l_bool_wr_LI0_PFGLS__Capsense_errorCode(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS__Capsense_errorCode_BYTE_OFFSET], \
    LIN_LI0_PFGLS__Capsense_errorCode_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS__Capsense_errorCode_BYTE_OFFSET], \
    LIN_LI0_PFGLS__Capsense_errorCode_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS__Capsense_errorCode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS__Capsense_errorCode_FLAG_BIT_OFFSET);}
/* static access macros for signal LI0_PFGLS__Motor_errorCode */

 
#define l_bool_rd_LI0_PFGLS__Motor_errorCode() \
    (LIN_TEST_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS__Motor_errorCode_BYTE_OFFSET], \
    LIN_LI0_PFGLS__Motor_errorCode_BIT_OFFSET))

#define l_bool_wr_LI0_PFGLS__Motor_errorCode(A) \
    {(A) ? \
    (LIN_SET_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS__Motor_errorCode_BYTE_OFFSET], \
    LIN_LI0_PFGLS__Motor_errorCode_BIT_OFFSET)):\
    (LIN_CLEAR_BIT(g_lin_frame_data_buffer[LIN_LI0_PFGLS__Motor_errorCode_BYTE_OFFSET], \
    LIN_LI0_PFGLS__Motor_errorCode_BIT_OFFSET));\
    LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS__Motor_errorCode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS__Motor_errorCode_FLAG_BIT_OFFSET);}


/* Signal flag APIs */

#define l_flg_tst_LI0_PDCU_BDCS1_Backlight_brightness_fb_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PDCU_BDCS1_Backlight_brightness_fb_FLAG_BYTE_OFFSET],\
         LIN_LI0_PDCU_BDCS1_Backlight_brightness_fb_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PDCU_BDCS1_Backlight_brightness_fb_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PDCU_BDCS1_Backlight_brightness_fb_FLAG_BYTE_OFFSET],\
         LIN_LI0_PDCU_BDCS1_Backlight_brightness_fb_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_BDCS1_BacklightStatus_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDCS1_BacklightStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDCS1_BacklightStatus_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_BDCS1_BacklightStatus_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_BDCS1_BacklightStatus_FLAG_BYTE_OFFSET],\
         LIN_LI0_BDCS1_BacklightStatus_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PFGLS_ResponseError_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS_ResponseError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS_ResponseError_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PFGLS_ResponseError_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS_ResponseError_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS_ResponseError_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PFGLS_RLWindowControl_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS_RLWindowControl_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS_RLWindowControl_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PFGLS_RLWindowControl_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS_RLWindowControl_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS_RLWindowControl_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PFGLS_CustomSignal_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS_CustomSignal_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS_CustomSignal_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PFGLS_CustomSignal_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS_CustomSignal_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS_CustomSignal_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PFGLS_ButtonSoundRequest_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS_ButtonSoundRequest_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS_ButtonSoundRequest_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PFGLS_ButtonSoundRequest_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS_ButtonSoundRequest_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS_ButtonSoundRequest_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PFGLS_ErrorSts_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS_ErrorSts_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS_ErrorSts_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PFGLS_ErrorSts_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS_ErrorSts_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS_ErrorSts_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PFGLS_Voltage_errorCode_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS_Voltage_errorCode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS_Voltage_errorCode_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PFGLS_Voltage_errorCode_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS_Voltage_errorCode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS_Voltage_errorCode_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PFGLS__Capsense_errorCode_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS__Capsense_errorCode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS__Capsense_errorCode_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PFGLS__Capsense_errorCode_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS__Capsense_errorCode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS__Capsense_errorCode_FLAG_BIT_OFFSET)

#define l_flg_tst_LI0_PFGLS__Motor_errorCode_flag() \
         LIN_TEST_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS__Motor_errorCode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS__Motor_errorCode_FLAG_BIT_OFFSET)
#define l_flg_clr_LI0_PFGLS__Motor_errorCode_flag() \
         LIN_CLEAR_BIT(g_lin_flag_handle_tbl[LIN_LI0_PFGLS__Motor_errorCode_FLAG_BYTE_OFFSET],\
         LIN_LI0_PFGLS__Motor_errorCode_FLAG_BIT_OFFSET)



/* Frame flag APIs */

   /* Interface_name = LI0 */

 #define l_flg_tst_LI0_PDCU_Lin1Fr1_flag() \
          g_lin_frame_flag_handle_tbl[LI0_PDCU_Lin1Fr1]
 #define l_flg_clr_LI0_PDCU_Lin1Fr1_flag() \
          g_lin_frame_flag_handle_tbl[LI0_PDCU_Lin1Fr1] = 0

 #define l_flg_tst_LI0_PFGLS_Lin1Fr1_flag() \
          g_lin_frame_flag_handle_tbl[LI0_PFGLS_Lin1Fr1]
 #define l_flg_clr_LI0_PFGLS_Lin1Fr1_flag() \
          g_lin_frame_flag_handle_tbl[LI0_PFGLS_Lin1Fr1] = 0

 #define l_flg_tst_LI0_MasterReq_flag() \
          g_lin_frame_flag_handle_tbl[LI0_MasterReq]
 #define l_flg_clr_LI0_MasterReq_flag() \
          g_lin_frame_flag_handle_tbl[LI0_MasterReq] = 0

 #define l_flg_tst_LI0_SlaveResp_flag() \
          g_lin_frame_flag_handle_tbl[LI0_SlaveResp]
 #define l_flg_clr_LI0_SlaveResp_flag() \
          g_lin_frame_flag_handle_tbl[LI0_SlaveResp] = 0


/* INTERFACE MANAGEMENT */

/*FUNCTION**********************************************************************
 *
 * Function Name : l_ifc_init_interface
 * Description   : This static function call to dynamic function l_ifc_init()
 *
 * Implements    : l_ifc_init_interface_Class
 *END**************************************************************************/

#define l_ifc_init_LI0() l_ifc_init(LI0)


/*FUNCTION**********************************************************************
 *
 * Function Name : l_ifc_wake_up_interface
 * Description   : This static function call to dynamic function l_ifc_wake_up()
 *
 * Implements    : l_ifc_wake_up_interface_Class
 *END**************************************************************************/

#define l_ifc_wake_up_LI0() l_ifc_wake_up(LI0)


/*FUNCTION**********************************************************************
 *
 * Function Name : l_ifc_read_status_interface
 * Description   : This static function call to dynamic function l_ifc_read_status()
 *
 * Implements    : l_ifc_read_status_interface_Class
 *END**************************************************************************/

#define l_ifc_read_status_LI0() l_ifc_read_status(LI0)





#define LI0_DIAG_NUMBER_OF_SERVICES     13U

#define LI0_DIAGSRV_READ_BY_IDENTIFIER_ORDER       0U
#define LI0_DIAGSRV_CONDITIONAL_CHANGE_NAD_ORDER       1U
#define LI0_DIAGSRV_SAVE_CONFIGURATION_ORDER       2U
#define LI0_DIAGSRV_ASSIGN_FRAME_ID_RANGE_ORDER       3U
#define LI0_DIAGSRV_READ_DATA_BY_IDENTIFIER_ORDER       4U
#define LI0_DIAGSRV_WRITE_DATA_BY_IDENTIFIER_ORDER       5U
#define LI0_DIAGSRV_SESSION_CONTROL_ORDER       6U
#define LI0_DIAGSRV_IO_CONTROL_BY_IDENTIFIER_ORDER       7U
#define LI0_DIAGSRV_FAULT_MEMORY_READ_ORDER       8U
#define LI0_DIAGSRV_FAULT_MEMORY_CLEAR_ORDER       9U

#define MAX_LENGTH_SERVICE 4095




#endif    /* _LIN_CFG_H_ */
